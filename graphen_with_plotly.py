import numpy as np  # импортирование модуля для общих математических функций, используя сокращенное название np
# библиотека для создания графиков
import plotly.graph_objects as go  # импортирование модуля создания графиков, используя сокращенное название go
from plotly.subplots import make_subplots  # импортирование из модуля создания графиков функции make_subplots

# Constants
a = 1.42  # задаем расстоение между соседними атомами
d = a * np.sqrt(3)  # создание вспомогательной перемнной d. np.sqrt(x) -обращение к функции  квадратного корня из модуля
# numpy. Функция на вход принимает число 'x' и возвращает значение квадратного корня
t = 2.7  # задаем переменну t-энергия перехода к предыдущему или следующему ближайшему соседнему атому

""""Получение массива значений x и y
np.arrange(x0, x1, dx) - обращение к функции создания массива по двум крайнимм значениям с заданным шагом из модуля 
numpy, где x0-левый конец отрезка(включенный в массив), x1-правый конец отрезка(не включенный в массив), dx-шаг. 
np.pi - константное значение числа Пи из модуля numpy"""
x = np.arange(-0.6 * np.pi, 0.6 * np.pi, 0.1)
y = np.arange(-0.6 * np.pi, 0.6 * np.pi, 0.1)
"""Получение координатной сетки
np.mesgrid()-фунция из модуля numpy для создание матрицы по входным значениями"""
x, y = np.meshgrid(x, y)  # Получение координатной сетки
"""Получение функции E(x, y) - энергетический спектр электронов в графене.
np.sqrt(x) - описана выше.
np.cos(x)-функция косинуса из модуля numpy, которая принимает на вход значение x и возвращает значение косинуса от x"""
E = t * np.sqrt(1 + 4 * pow(np.cos((d * y) / 2), 2) + 4 * np.cos((d * y) / 2) * np.cos((3 * a * x) / 2))
# Создание прототипа класса для визуализации
fig = make_subplots(rows=1, cols=1,  # 1 график
                    specs=[[{'is_3d': True}]],  # 3D график
                    subplot_titles=['Дисперсионная зависимость графена'],  # Подпись графика
                    )
"""Построение верхней части графика (+E)
Вызов метода прототипа fig.add_trace(), принимающего на вход график
go.Surface()-вызов функции для построения графика, который на вход принимает обязательные параметры x, y, z 
и все остальные необязательные(опциональные)"""
fig.add_trace(go.Surface(x=x,  # Задаем x
                         y=y,  # Задаем y
                         z=E,  # Задаем z
                         surfacecolor=E + 8,  # Задаем градиент цвета
                         colorscale='delta',  # Выбираем цветовую гамму
                         showscale=False,  # отключение таблицы с зависимостью градиента цвета от значений(кооординат)
                         name="+E"))
# Построение нижней части графика (-E)
fig.add_trace(go.Surface(x=x,
                         y=y,
                         z=-E,
                         surfacecolor=E - 8,
                         colorscale='delta',
                         showscale=False,
                         name="-E"))
fig.show()  # Функция для вывода полученно графика в отдельном окне
